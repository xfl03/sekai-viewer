{"version":3,"sources":["../node_modules/@material-ui/core/esm/CardContent/CardContent.js","components/EventList.tsx"],"names":["CardContent","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","name","useStyles","makeStyles","theme","media","paddingTop","backgroundSize","card","cursor","header","overflow","breakpoints","down","spacing","EventList","contentTransMode","layoutClasses","useLayoutStyles","path","useRouteMatch","t","useTranslation","assetT","useAssetI18n","useState","events","setEvents","useCachedData","eventsCache","eventsCacheRef","localStorage","getItem","viewGridType","useRefState","page","pageRef","setPage","limit","limitRef","lastQueryFinRef","setLastQueryFin","isReadyRef","setIsReady","useEffect","document","title","slice","getPaginatedEvents","Boolean","length","ListCard","grid","data","to","id","style","textDecoration","image","process","assetbundleName","variant","color","eventType","width","content","maxWidth","InfiniteScroll","viewComponent","callback","entries","setHasMore","current","isIntersecting","gridSize","xs","md","sm"],"mappings":"sHAAA,8CAeIA,EAA2BC,cAAiB,SAAqBC,EAAOC,GAC1E,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAmBJ,EAAMK,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDG,EAAQC,YAAyBR,EAAO,CAAC,UAAW,YAAa,cAErE,OAAoBD,gBAAoBO,EAAWG,YAAS,CAC1DN,UAAWO,YAAKR,EAAQS,KAAMR,GAC9BF,IAAKA,GACJM,OAgCUK,gBAnDK,CAElBD,KAAM,CACJE,QAAS,GACT,eAAgB,CACdC,cAAe,MA8Ca,CAChCC,KAAM,kBADOH,CAEZd,I,kNCxCGkB,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,MAAO,CACLC,WAAY,SACZC,eAAgB,WAElBC,KAAM,CAEJC,OAAQ,WAEVC,QAAM,GACJ,cAAe,SACfC,SAAU,SACV,gBAAiB,YAHb,cAIHP,EAAMQ,YAAYC,KAAK,MAAQ,CAC9B,YAAa,UALX,cAOJ,YAAa,SAPT,GASN,WAAY,CACVd,QAASK,EAAMU,QAAQ,KAAM,WAyIlBC,UAjIyD,SAAC,GAElE,IADLC,EACI,EADJA,iBAEM5B,EAAUc,IACVe,EAAgBC,cACdC,EAASC,cAATD,KACAE,EAAMC,cAAND,EACAE,EAAWC,cAAXD,OALJ,EAOwBE,mBAAuB,IAP/C,mBAOGC,EAPH,KAOWC,EAPX,OAQkCC,YAA0B,UAR5D,mBAQGC,EARH,KAQgBC,EARhB,OAUmBL,mBACrBM,aAAaC,QAAQ,8BAAgC,QADhDC,EAVH,sBAa6BC,YAAoB,GAbjD,mBAaGC,EAbH,KAaSC,EAbT,KAakBC,EAblB,OAcsBH,YAAoB,IAd1C,mBAcGI,EAdH,KAcUC,EAdV,OAeyCL,aAAqB,GAf9D,mBAeKM,EAfL,KAesBC,EAftB,OAgB+BP,aAAqB,GAhBpD,mBAgBKQ,EAhBL,KAgBiBC,EAhBjB,KAkBJC,qBAAU,WACRC,SAASC,MAAQ,8BAChB,IAEHF,qBAAU,WACRjB,GAAU,SAACD,GAAD,4BACLA,GADK,YA7Bd,SAA4BA,EAAsBS,EAAcG,GAC9D,OAAOZ,EAAOqB,MAAMT,GAASH,EAAO,GAAIG,EAAQH,GA8BzCa,CAAmBnB,EAAaM,EAAMG,QAE3CG,GAAgB,KACf,CAACN,EAAMG,EAAOG,EAAiBZ,IAElCe,qBAAU,WACRD,EAAWM,QAAQpB,EAAYqB,WAC9B,CAACP,EAAYd,IAEhB,IAqBMsB,EAA+D,CACnEC,KAAM,YAAe,IAAZC,EAAW,EAAXA,KACP,OAAKA,EAiBH,kBAAC,IAAD,CAAMC,GAAInC,EAAO,IAAMkC,EAAKE,GAAIC,MAAO,CAAEC,eAAgB,SACvD,kBAAC,IAAD,CAAMpE,UAAWD,EAAQoB,MACvB,kBAAC,IAAD,CACEnB,UAAWD,EAAQiB,MACnBqD,MAAK,UAAKC,+BAAL,oCAAmEN,EAAKO,gBAAxE,uBACLd,MACuB,aAArB9B,EACIqC,EAAKpD,KACgB,eAArBe,EACAO,EAAO,cAAD,OAAe8B,EAAKE,IAAMF,EAAKpD,MACrCoD,EAAKpD,OAGb,kBAAC,IAAD,CAAauD,MAAO,CAAExD,cAAe,SACnC,kBAAC,IAAD,CAAY6D,QAAQ,YAAYxE,UAAWD,EAAQsB,QAC3B,aAArBM,EACGqC,EAAKpD,KACgB,eAArBe,EACAO,EAAO,cAAD,OAAe8B,EAAKE,IAAMF,EAAKpD,MACrCoD,EAAKpD,MAEX,kBAAC,IAAD,CAAY4D,QAAQ,QAAQC,MAAM,iBAC/BzC,EAAE,cAAD,OAAegC,EAAKU,gBApC5B,kBAAC,IAAD,CAAM1E,UAAWD,EAAQoB,MACvB,kBAAC,IAAD,CAAUqD,QAAQ,OAAOxE,UAAWD,EAAQiB,QAC5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYwD,QAAQ,YAAYxE,UAAWD,EAAQsB,QACjD,kBAAC,IAAD,CAAUmD,QAAQ,OAAOG,MAAM,SAEjC,kBAAC,IAAD,CAAYH,QAAQ,SAClB,kBAAC,IAAD,CAAUA,QAAQ,OAAOG,MAAM,aAsC7C,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYH,QAAQ,KAAKxE,UAAW4B,EAAcP,QAC/CW,EAAE,iBAEL,kBAAC,IAAD,CAAWhC,UAAW4B,EAAcgD,QAASC,SAAS,MACnDC,YAA2B,CAC1BC,cAAejB,EAASlB,GACxBoC,SA/ES,SACfC,EACAC,GAEK7B,EAAW8B,UAEdF,EAAQ,GAAGG,gBACXjC,EAAgBgC,WACd1C,EAAe0C,QAAQtB,QACvBpB,EAAe0C,QAAQtB,OAASd,EAAQoC,QAAUjC,EAASiC,UAE7DnC,GAAQ,SAACF,GAAD,OAAUA,EAAO,KACzBM,GAAgB,IAEhBX,EAAe0C,QAAQtB,QACvBpB,EAAe0C,QAAQtB,QAAUd,EAAQoC,QAAUjC,EAASiC,SAE5DD,GAAW,KA+DPlB,KAAM3B,EACNgD,SAAU,CACRC,GAAI,GACJC,GACmB,SAAjB3C,EAA0B,EAAgC,GAC5D4C,GAAI","file":"static/js/17.c9ed2a19.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import {\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Typography,\n  Container,\n} from \"@material-ui/core\";\nimport { useLayoutStyles } from \"../styles/layout\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { ContentTransModeType, IEventInfo } from \"../types\";\nimport { useCachedData, useRefState } from \"../utils\";\nimport InfiniteScroll from \"./subs/InfiniteScroll\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { useAssetI18n } from \"../utils/i18n\";\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    paddingTop: \"56.25%\",\n    backgroundSize: \"contain\",\n  },\n  card: {\n    // margin: theme.spacing(0.5),\n    cursor: \"pointer\",\n  },\n  header: {\n    \"white-space\": \"nowrap\",\n    overflow: \"hidden\",\n    \"text-overflow\": \"ellipsis\",\n    [theme.breakpoints.down(\"md\")]: {\n      \"max-width\": \"200px\",\n    },\n    \"max-width\": \"250px\",\n  },\n  \"grid-out\": {\n    padding: theme.spacing(\"1%\", \"2%\"),\n  },\n}));\n\nfunction getPaginatedEvents(events: IEventInfo[], page: number, limit: number) {\n  return events.slice(limit * (page - 1), limit * page);\n}\n\nconst EventList: React.FC<{ contentTransMode: ContentTransModeType }> = ({\n  contentTransMode,\n}) => {\n  const classes = useStyles();\n  const layoutClasses = useLayoutStyles();\n  const { path } = useRouteMatch();\n  const { t } = useTranslation();\n  const { assetT } = useAssetI18n();\n\n  const [events, setEvents] = useState<IEventInfo[]>([]);\n  const [eventsCache, eventsCacheRef] = useCachedData<IEventInfo>(\"events\");\n\n  const [viewGridType] = useState<string>(\n    localStorage.getItem(\"event-list-grid-view-type\") || \"grid\"\n  );\n  const [page, pageRef, setPage] = useRefState<number>(1);\n  const [limit, limitRef] = useRefState<number>(12);\n  const [, lastQueryFinRef, setLastQueryFin] = useRefState<boolean>(true);\n  const [, isReadyRef, setIsReady] = useRefState<boolean>(false);\n\n  useEffect(() => {\n    document.title = \"Event List | Sekai Viewer\";\n  }, []);\n\n  useEffect(() => {\n    setEvents((events) => [\n      ...events,\n      ...getPaginatedEvents(eventsCache, page, limit),\n    ]);\n    setLastQueryFin(true);\n  }, [page, limit, setLastQueryFin, eventsCache]);\n\n  useEffect(() => {\n    setIsReady(Boolean(eventsCache.length));\n  }, [setIsReady, eventsCache]);\n\n  const callback = (\n    entries: IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    if (!isReadyRef.current) return;\n    if (\n      entries[0].isIntersecting &&\n      lastQueryFinRef.current &&\n      (!eventsCacheRef.current.length ||\n        eventsCacheRef.current.length > pageRef.current * limitRef.current)\n    ) {\n      setPage((page) => page + 1);\n      setLastQueryFin(false);\n    } else if (\n      eventsCacheRef.current.length &&\n      eventsCacheRef.current.length <= pageRef.current * limitRef.current\n    ) {\n      setHasMore(false);\n    }\n  };\n\n  const ListCard: { [key: string]: React.FC<{ data?: IEventInfo }> } = {\n    grid: ({ data }) => {\n      if (!data) {\n        // loading\n        return (\n          <Card className={classes.card}>\n            <Skeleton variant=\"rect\" className={classes.media}></Skeleton>\n            <CardContent>\n              <Typography variant=\"subtitle1\" className={classes.header}>\n                <Skeleton variant=\"text\" width=\"90%\"></Skeleton>\n              </Typography>\n              <Typography variant=\"body2\">\n                <Skeleton variant=\"text\" width=\"40%\"></Skeleton>\n              </Typography>\n            </CardContent>\n          </Card>\n        );\n      }\n      return (\n        <Link to={path + \"/\" + data.id} style={{ textDecoration: \"none\" }}>\n          <Card className={classes.card}>\n            <CardMedia\n              className={classes.media}\n              image={`${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/event/${data.assetbundleName}/logo_rip/logo.webp`}\n              title={\n                contentTransMode === \"original\"\n                  ? data.name\n                  : contentTransMode === \"translated\"\n                  ? assetT(`event_name:${data.id}`, data.name)\n                  : data.name\n              }\n            ></CardMedia>\n            <CardContent style={{ paddingBottom: \"16px\" }}>\n              <Typography variant=\"subtitle1\" className={classes.header}>\n                {contentTransMode === \"original\"\n                  ? data.name\n                  : contentTransMode === \"translated\"\n                  ? assetT(`event_name:${data.id}`, data.name)\n                  : data.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {t(`event:type.${data.eventType}`)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Link>\n      );\n    },\n  };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:event\")}\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"md\">\n        {InfiniteScroll<IEventInfo>({\n          viewComponent: ListCard[viewGridType],\n          callback,\n          data: events,\n          gridSize: {\n            xs: 12,\n            md:\n              viewGridType === \"grid\" ? 4 : viewGridType === \"agenda\" ? 12 : 12,\n            sm: 6,\n          },\n        })}\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default EventList;\n"],"sourceRoot":""}