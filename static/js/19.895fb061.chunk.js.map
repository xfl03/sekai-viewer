{"version":3,"sources":["../node_modules/@material-ui/core/esm/CardContent/CardContent.js","components/GachaList.tsx"],"names":["CardContent","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","name","useStyles","makeStyles","theme","media","paddingTop","backgroundSize","card","cursor","subheader","overflow","GachaList","contentTransMode","layoutClasses","useLayoutStyles","path","useRouteMatch","t","useTranslation","assetT","useAssetI18n","useState","gachas","setGachas","useCachedData","gachasCache","gachasCacheRef","useRefState","page","pageRef","setPage","limit","limitRef","lastQueryFinRef","setLastQueryFin","isReadyRef","setIsReady","useEffect","document","title","slice","getPaginatedGachas","Boolean","length","variant","header","content","maxWidth","InfiniteScroll","viewComponent","data","to","id","style","textDecoration","image","process","assetbundleName","width","callback","entries","setHasMore","current","isIntersecting","gridSize","sm","lg"],"mappings":"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","file":"static/js/19.895fb061.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import {\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Typography,\n  Container,\n} from \"@material-ui/core\";\nimport { useLayoutStyles } from \"../styles/layout\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { useCachedData, useRefState } from \"../utils\";\nimport InfiniteScroll from \"./subs/InfiniteScroll\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { ContentTransModeType, IGachaInfo } from \"../types\";\nimport { useAssetI18n } from \"../utils/i18n\";\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    paddingTop: \"56.25%\",\n    backgroundSize: \"contain\",\n  },\n  card: {\n    // margin: theme.spacing(0.5),\n    cursor: \"pointer\",\n  },\n  subheader: {\n    \"white-space\": \"nowrap\",\n    overflow: \"hidden\",\n    \"text-overflow\": \"ellipsis\",\n    \"max-width\": \"260px\",\n  },\n}));\n\nfunction getPaginatedGachas(gachas: IGachaInfo[], page: number, limit: number) {\n  return gachas.slice(limit * (page - 1), limit * page);\n}\n\nconst GachaList: React.FC<{ contentTransMode: ContentTransModeType }> = ({\n  contentTransMode,\n}) => {\n  const classes = useStyles();\n  const layoutClasses = useLayoutStyles();\n  const { path } = useRouteMatch();\n  const { t } = useTranslation();\n  const { assetT } = useAssetI18n();\n\n  const [gachas, setGachas] = useState<IGachaInfo[]>([]);\n  const [gachasCache, gachasCacheRef] = useCachedData<IGachaInfo>(\"gachas\");\n\n  const [page, pageRef, setPage] = useRefState<number>(1);\n  const [limit, limitRef] = useRefState<number>(12);\n  const [, lastQueryFinRef, setLastQueryFin] = useRefState<boolean>(true);\n  const [, isReadyRef, setIsReady] = useRefState<boolean>(false);\n\n  useEffect(() => {\n    document.title = \"Gacha List | Sekai Viewer\";\n  }, []);\n\n  useEffect(() => {\n    setGachas((gachas) => [\n      ...gachas,\n      ...getPaginatedGachas(gachasCache, page, limit),\n    ]);\n    setLastQueryFin(true);\n  }, [page, limit, setLastQueryFin, gachasCache]);\n\n  useEffect(() => {\n    setIsReady(Boolean(gachasCache.length));\n  }, [setIsReady, gachasCache]);\n\n  const callback = (\n    entries: IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    if (!isReadyRef.current) return;\n    if (\n      entries[0].isIntersecting &&\n      lastQueryFinRef.current &&\n      (!gachasCacheRef.current.length ||\n        gachasCacheRef.current.length > pageRef.current * limitRef.current)\n    ) {\n      setPage((page) => page + 1);\n      setLastQueryFin(false);\n    } else if (\n      gachasCacheRef.current.length &&\n      gachasCacheRef.current.length <= pageRef.current * limitRef.current\n    ) {\n      setHasMore(false);\n    }\n  };\n\n  const ListCard: React.FC<{ data?: IGachaInfo }> = ({ data }) => {\n    if (!data) {\n      // loading\n      return (\n        <Card className={classes.card}>\n          <Skeleton variant=\"rect\" className={classes.media}></Skeleton>\n          <CardContent>\n            <Typography variant=\"subtitle1\" className={classes.subheader}>\n              <Skeleton variant=\"text\" width=\"90%\"></Skeleton>\n            </Typography>\n          </CardContent>\n        </Card>\n      );\n    }\n    return (\n      <Link to={path + \"/\" + data.id} style={{ textDecoration: \"none\" }}>\n        <Card className={classes.card}>\n          <CardMedia\n            className={classes.media}\n            image={`${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/gacha/${data.assetbundleName}/logo_rip/logo.webp`}\n            title={data.name}\n          ></CardMedia>\n          <CardContent style={{ paddingBottom: \"16px\" }}>\n            <Typography variant=\"subtitle1\" className={classes.subheader}>\n              {contentTransMode === \"original\"\n                ? data.name\n                : contentTransMode === \"translated\"\n                ? assetT(`gacha_name:${data.id}`, data.name)\n                : data.name}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Link>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:gacha\")}\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"md\">\n        {InfiniteScroll<IGachaInfo>({\n          viewComponent: ListCard,\n          callback,\n          data: gachas,\n          gridSize: {\n            sm: 6,\n            lg: 4,\n          },\n        })}\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default GachaList;\n"],"sourceRoot":""}